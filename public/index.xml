<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My blog</title>
    <link>https://noskov.dev/</link>
    <description>Recent content on My blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Mon, 07 Nov 2016 14:50:10 +0600</lastBuildDate>
    
	<atom:link href="https://noskov.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Golang and etc.</title>
      <link>https://noskov.dev/programming/docker-go/</link>
      <pubDate>Mon, 07 Nov 2016 14:50:10 +0600</pubDate>
      
      <guid>https://noskov.dev/programming/docker-go/</guid>
      <description>Containerization Go Самым удивительным фактов при сборке образов для запуска программ на Go, был их размер. Озаботившись этой задачей я стал искать информацию по минификации образов, и нашёл отличную статью Building minimal docker containers for go applications</description>
    </item>
    
    <item>
      <title>redux</title>
      <link>https://noskov.dev/programming/redux/</link>
      <pubDate>Wed, 06 Apr 2016 09:50:54 +0600</pubDate>
      
      <guid>https://noskov.dev/programming/redux/</guid>
      <description>Команды mkdir kursapp cd kursapp/ mkdir client server common static npm init npm i --save react react-dom axios react-router redux react-redux express redux-thunk react-router-redux npm i --save-dev webpack webpack-dev-server babel-{core,loader,register,preset-react,preset-stage-0,preset-es2015} react-hot-loader echo &#39;{&amp;quot;presets&amp;quot;:[&amp;quot;es2015&amp;quot;,&amp;quot;react&amp;quot;,&amp;quot;stage-0&amp;quot;]}&#39; &amp;gt; .babelrc  webpack.dev.config.js var webpack = require(&#39;webpack&#39;) module.exports = { entry: [ &#39;webpack-dev-server/client?http://127.0.0.1:8282/&#39;, &#39;webpack/hot/only-dev-server&#39;, &#39;./client/index&#39; ], output: { filename: &#39;static/bundle.js&#39; }, module:{ loaders:[ { test: /\.jsx?$/, exclude: /node_modules/, loaders:[ &amp;quot;react-hot&amp;quot;, &amp;quot;babel&amp;quot; ] } ] }, plugins:[ new webpack.</description>
    </item>
    
    <item>
      <title>Сравнение производительности RethinkDB на NodeJS и Go</title>
      <link>https://noskov.dev/programming/compare-rethinkdb-nodejs-golang/</link>
      <pubDate>Thu, 24 Mar 2016 14:35:08 +0600</pubDate>
      
      <guid>https://noskov.dev/programming/compare-rethinkdb-nodejs-golang/</guid>
      <description>Выбор платформы для работы RethinkDB Твёрдо решив что всё таки стоит попробовать использовать RethinkDB в качестве базы данных, я задался какой же платформой воспользоваться для создания REST API.
Раннее я сравнивал RethinkDB c Mysql на различных платформах. Тест был тривиален и содержал лишь в себе инициацию соединения с БД и один запрос на выборку данных.
 NodeJS или Go На графике понятно только одно, что &amp;ldquo;только не PHP&amp;rdquo;. Хотя PHP7 весьма неплох.</description>
    </item>
    
    <item>
      <title>Перевод проекта из кодировки CP1251 в UTF-8</title>
      <link>https://noskov.dev/programming/cp1251_to_utf8/</link>
      <pubDate>Tue, 09 Feb 2016 18:47:02 +0600</pubDate>
      
      <guid>https://noskov.dev/programming/cp1251_to_utf8/</guid>
      <description>Кодовая база проекта Можно воспользоваться таким вариантом в виде &amp;ldquo;почти одной&amp;rdquo; команды.
for FILE in $(find /project -name &#39;*.php&#39;); do mv $FILE{,.orig} &amp;amp;&amp;amp; iconv -f CP1251 -t UTF-8 $FILE.orig -o $FILE; done  Или можно использовать простой BASH-скрипт
#!/bin/bash # Рекурсивная конвертация windows-1251 --&amp;gt; utf-8 # Напримере файлов *.php, *.html, *.css, *.js. find ./project -name &amp;quot;*.php&amp;quot; -o -name &amp;quot;*.html&amp;quot; -o -name &amp;quot;*.css&amp;quot; -o -name &amp;quot;*.js&amp;quot; -type f | while read file do echo &amp;quot; $file&amp;quot; mv $file $file.</description>
    </item>
    
    <item>
      <title>Agile, Scrum и все все все...</title>
      <link>https://noskov.dev/vesna/agile/</link>
      <pubDate>Mon, 08 Feb 2016 12:26:23 +0600</pubDate>
      
      <guid>https://noskov.dev/vesna/agile/</guid>
      <description>Agile в &amp;ldquo;Весне&amp;rdquo; Однажды, собравшись с духом, мы решили что пора внедрять гибкие методологии в разработку проектов. Это был уже далёкий 2011-й год.
Я даже выступал на конференции IMIX в надежде популяризировать идёю использования её в других компаниях, а так же рассказать подробнее о ней для потенциальных заказчиков. (Презентация на IMIX 2011)
Прошло уже 5 лет с тех пор, а внедрить scrum в разработку сайтов так и не вышло. И причин тому несколько.</description>
    </item>
    
    <item>
      <title>Новый блог на HUGO</title>
      <link>https://noskov.dev/vesna/new-blog/</link>
      <pubDate>Tue, 02 Feb 2016 21:01:35 +0600</pubDate>
      
      <guid>https://noskov.dev/vesna/new-blog/</guid>
      <description>Go и путь Gopher-а Совсем не так давно я изучая просторы Go, я наткнулся на проект Hugo. Проект представляет собой генерацию статичных страниц на основе файлов формата markdown.
Так как у меня в голове давно засела мысль о &amp;ldquo;скоростном вебе&amp;rdquo;, я незамедлительно решил что перенесу блог весны на платформу Hugo.
Основных причин было две:
 Сделать блог быстрым, ghost не радовал скоростью Изучить подробнее Go и его работу с вебом.</description>
    </item>
    
    <item>
      <title>Новый путь творческой группы &#34;Весна&#34;</title>
      <link>https://noskov.dev/vesna/new-path/</link>
      <pubDate>Mon, 01 Feb 2016 18:23:14 +0600</pubDate>
      
      <guid>https://noskov.dev/vesna/new-path/</guid>
      <description>С чего всё начиналось Я пришёл в веб-программирование 10 лет назад голодным студентом, и сразу &amp;ldquo;по-программистки&amp;rdquo; влюбился в эту область. Ведь здесь было целое поле огромных возможностей для развития и множество мелких побед. Здесь я чувствовал себя &amp;ldquo;победителем&amp;rdquo;, а программисту это весьма важно.
 смог заставить это работать в IE6 смог подключить плагин JQuery заставил эту картинку двигаться написал свою CMS, и доволен этим переписал свою CMS, потому что старая была ужасна.</description>
    </item>
    
    <item>
      <title>Сравнение производительности PHP5.6, PHP7, NodeJS, Go</title>
      <link>https://noskov.dev/ghost/sravnieniie-proizvoditielnosti-mysqldb-rethinkdb/</link>
      <pubDate>Thu, 14 Jan 2016 13:28:26 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/sravnieniie-proizvoditielnosti-mysqldb-rethinkdb/</guid>
      <description> Оптимизация Задумавшись над оптимизацией производительности одного из проектов, захотелось привести ряд замеров скорости на разных базах и платформах.
Чтобы не затрагивать аспекты производительности фреймворков (роутинг, работа с шаблонами) я старался минимально протестировать скорость инициации соединения с базой и запрос на получение данных.
И вот что из этого вышло:
 </description>
    </item>
    
    <item>
      <title>Анализ скорости загрузки и работы сайта Scat.kz</title>
      <link>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-sta-kz/</link>
      <pubDate>Thu, 27 Aug 2015 10:29:52 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-sta-kz/</guid>
      <description>Следующий на очереди Scat.kz, с показателем firstPaint в 730мс.
Основные показатели Загрузка документа Общий объём документа в 2.6мб. Сайт полностью грузится за 14.52 секунды. Основной объём страницы в картинках, так же сильно смущает TTFB в 555мс, при отдаче статики. Это говорит либо о неправильных настройках сервера, либо его нагрузке при отдаче статики. PageSpeed ==57 / 100== Отчёт PageSpeed
Основные рекомендации:
 Сжатие картинок. Загруженные картинки не оптимизированы под веб. (Сохранение JPG с качеством не более 75 и удаление EXIF информации) На сервере отключено сжатие и кеширование статики необходимо его обязательно настроить.</description>
    </item>
    
    <item>
      <title>Анализ скорости загрузки и работы сайта Aviasales.kz</title>
      <link>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-aviasales-kz/</link>
      <pubDate>Mon, 10 Aug 2015 20:57:03 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-aviasales-kz/</guid>
      <description>Следующий на очереди Aviasales.kz, с показателем firstPaint в 685мс.
Основные показатели Загрузка документа Общий объём документа в 589Кб (в 4 раза меньше чем сайт bekair.com), обеспечивает быструю загрузку даже на скорости 1Мбит/сек. Сайт полностью грузится за 3.75 секунды. Минусом является тот факт, что проект расположен где то в Великобритании. Вследствие этого увеличивается пинг (~120мс) и, соответственно, время ожидания получения данных (TTFB в среднем около 250мс).
Блокирующие загрузки Все файлы в секции HEAD блокируют отображение страницы до момента их полной загрузки.</description>
    </item>
    
    <item>
      <title>Анализ скорости загрузки и работы сайта Bekair.com</title>
      <link>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-bekair-com/</link>
      <pubDate>Wed, 05 Aug 2015 15:43:14 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/analiz-skorosti-zaghruzki-i-raboty-saita-bekair-com/</guid>
      <description>Тестирование производительности я решил начать с проекта, продемонстрировавшего самый лучший показатель &amp;ldquo;firstPaint&amp;rdquo;.
Основные показатели Быстрое начало прорисовки сайта обусловлено малым количеством запросов и небольшим размеров &amp;ldquo;блокирующих загрузок&amp;rdquo;.
Но дальше начинается интересное.
Тестирование загрузки проводилось при скорости 1Mbps (Good 3G). Обратите внимание на синий цвет, это длительность процесса загрузки изображений. Как мы видим, наибольшую часть времени загрузки страницы занимает загрузка изображений, и их на странице 1.8 Мбайт из 1.9 общего объёма.</description>
    </item>
    
    <item>
      <title>Сравнение скорости сайтов авиакомпаний и агрегаторов</title>
      <link>https://noskov.dev/ghost/sravnieniie-skorosti-zaghruzki/</link>
      <pubDate>Tue, 04 Aug 2015 16:51:22 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/sravnieniie-skorosti-zaghruzki/</guid>
      <description>Увидев в ленте FB пост о сравнении скорости загрузки сайтов различных авиакомпаний и aviata.kz, решил что отличным продолжением темы &amp;ldquo;Скорости загрузки сайтов&amp;rdquo;, будет провести более глубокое исследование на тему клиентской оптимизации, взяв за основу предоставленную выборку, но немного дополнив её.
Сначала поговорим о цифрах, потом разберём каждый сайт отдельно.
Сайты авиакомпаний:
 http://www.bekair.com http://www.scat.kz/ru/ http://airastana.com/kaz/ru-RU  Агрегаторы авиабилетов:
 https://www.chocotravel.com/ http://aviasales.kz/ https://aviata.kz/ https://flight.kz/  Часть 1. Цифры Основным (и самым простым) параметром при загрузке страницы является её объём.</description>
    </item>
    
    <item>
      <title>Meteor Shop: Скорость загрузки и работы сайта- почему она важна. Часть 1</title>
      <link>https://noskov.dev/ghost/meteor-shop-skorost-pochiemu-ona-vazhna/</link>
      <pubDate>Mon, 03 Aug 2015 19:52:59 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/meteor-shop-skorost-pochiemu-ona-vazhna/</guid>
      <description>Andy Hume - Разработчик в Twitter, в прошлом разработчик в Microsoft, Guardian &amp;gt; There is no difference for the user between a site down and site beign inaccessable due to loading issues caused by blocking resources or slow networks.
Очень интересная мысль заключается в том, что для пользователя нет никакой разницы между неработающим и медленным сайтом.
Вопрос скорости загрузки сайта стал более актуален с ростом популярности мобильных устройств. По данным kurs.</description>
    </item>
    
    <item>
      <title>Чеклист для тестировщиков</title>
      <link>https://noskov.dev/ghost/chieklist-dlia-tiestirovshchikov/</link>
      <pubDate>Thu, 09 Jul 2015 19:47:31 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/chieklist-dlia-tiestirovshchikov/</guid>
      <description>Сегодня у нас возникла идея систематизировать все нюансы по проверке проекта при его завершении и ==деплое*==.
Мы решили сделать это коллективно через Google Docs.
Часть этого процесса удалось запечатлеть в скринкасте, что из этого вышло смотрите на коротком видео.
 За 20 минут чек-лист был готов и отдан на рассмотрение менеджеров.
Go-go Team!</description>
    </item>
    
    <item>
      <title>Разработка магазина шин</title>
      <link>https://noskov.dev/ghost/razrabotka-maghazina-shin/</link>
      <pubDate>Wed, 01 Jul 2015 19:28:00 +0600</pubDate>
      
      <guid>https://noskov.dev/ghost/razrabotka-maghazina-shin/</guid>
      <description>3-ий или 4-ый, брррр&amp;hellip; сбился со счёта&amp;hellip; В последнее время интерес к шинному бизнесу в интернете заметно вырос. Возможно дело в 40-ом месте в рейтинге 50 крупнейших интернет-компаний Казахстана, в ничем не примечательном (техническом плане) интернет-магазине шин ecar.kz. Может быть просто клиенты созрели выбирать шины в интернете.
Но как бы то ни было, спрос на магазины подобного типа заметно вырос.
Все это сподвигло меня написать несколько статей на тему создания интернет-магазина шин.</description>
    </item>
    
  </channel>
</rss>